---
AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the Amazon FSx for Windows File Server.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Common Settings
        Parameters:
          - ProjectName
          - Environment

Parameters:
  ProjectName:
    Description: Project Name
    Type: String
    Default: unnamed
  Environment:
    Description: Environment
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
      - stg
  S3BucketName:
    Description: Type of this BacketName.
    Type: String
  VPCID:
    Type: AWS::EC2::VPC::Id

Resources:
  # --------------------------------------------
  # IAM Role
  # --------------------------------------------
  KinesisIAMRole1:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub "${ProjectName}-${Environment}-kinesisrole-fsx"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref KinesisIAMPolicy1

  KinesisIAMPolicy1:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "${ProjectName}-${Environment}-ECSExecPolicy"
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: "*"

    #  KinesisIAMPolicy1:
    #    Type: "AWS::IAM::ManagedPolicy"
    #    Properties:
    #      ManagedPolicyName: !Sub "${ProjectName}-${Environment}-kinesispolicy-fsx"
    #      Path: "/service-role/"
    #      PolicyDocument: !Sub |
    #        {
    #            "Version": "2012-10-17",
    #            "Statement": [
    #                {
    #                    "Sid": "",
    #                    "Effect": "Allow",
    #                    "Action": [
    #                        "glue:GetTable",
    #                        "glue:GetTableVersion",
    #                        "glue:GetTableVersions"
    #                    ],
    #                    "Resource": [
    #                        "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog",
    #                        "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%",
    #                        "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
    #                    ]
    #                },
    #                {
    #                    "Sid": "",
    #                    "Effect": "Allow",
    #                    "Action": [
    #                        "s3:AbortMultipartUpload",
    #                        "s3:GetBucketLocation",
    #                        "s3:GetObject",
    #                        "s3:ListBucket",
    #                        "s3:ListBucketMultipartUploads",
    #                        "s3:PutObject"
    #                    ],
    #                    "Resource": [
    #                        "arn:aws:s3:::aws-waf-logs-ohmura-test",
    #                        "arn:aws:s3:::aws-waf-logs-ohmura-test/*"
    #                    ]
    #                },
    #                {
    #                    "Sid": "",
    #                    "Effect": "Allow",
    #                    "Action": [
    #                        "lambda:InvokeFunction",
    #                        "lambda:GetFunctionConfiguration"
    #                    ],
    #                    "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
    #                },
    #                {
    #                    "Effect": "Allow",
    #                    "Action": [
    #                        "kms:GenerateDataKey",
    #                        "kms:Decrypt"
    #                    ],
    #                    "Resource": [
    #                        "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
    #                    ],
    #                    "Condition": {
    #                        "StringEquals": {
    #                            "kms:ViaService": "s3.${AWS::Region}.amazonaws.com"
    #                        },
    #                        "StringLike": {
    #                            "kms:EncryptionContext:aws:s3:arn": [
    #                                "arn:aws:s3:::%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/*",
    #                                "arn:aws:s3:::%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
    #                            ]
    #                        }
    #                    }
    #                },
    #                {
    #                    "Sid": "",
    #                    "Effect": "Allow",
    #                    "Action": [
    #                        "logs:PutLogEvents"
    #                    ],
    #                    "Resource": [
    #                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/aws-fsx-share-prd-auditlog-fs:log-stream:*",
    #                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%:log-stream:*"
    #                    ]
    #                },
    #                {
    #                    "Sid": "",
    #                    "Effect": "Allow",
    #                    "Action": [
    #                        "kinesis:DescribeStream",
    #                        "kinesis:GetShardIterator",
    #                        "kinesis:GetRecords",
    #                        "kinesis:ListShards"
    #                    ],
    #                    "Resource": "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
    #                },
    #                {
    #                    "Effect": "Allow",
    #                    "Action": [
    #                        "kms:Decrypt"
    #                    ],
    #                    "Resource": [
    #                        "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
    #                    ],
    #                    "Condition": {
    #                        "StringEquals": {
    #                            "kms:ViaService": "kinesis.ap-northeast-1.amazonaws.com"
    #                        },
    #                        "StringLike": {
    #                            "kms:EncryptionContext:aws:kinesis:arn": "arn:aws:kinesis:ap-northeast-1:${AWS::AccountId}:stream/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
    #                        }
    #                    }
    #                }
    #            ]
    #        }
    #
    # ------------------------------------------------------------#
    # Kinesis Data Firehose
    # ------------------------------------------------------------#
    KinesisFirehoseDeliveryStream:
      Type: "AWS::KinesisFirehose::DeliveryStream"
      Properties:
        DeliveryStreamName: !Sub "aws-fsx-${ProjectName}-${Environment}-auditlog-fsx"
        DeliveryStreamType: "DirectPut"
        DeliveryStreamEncryptionConfigurationInput:
          KeyType: "AWS_OWNED_CMK"
        ExtendedS3DestinationConfiguration:
          BucketARN: !GetAtt S3Bucket
          BufferingHints:
            SizeInMBs: 5
            IntervalInSeconds: 300
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Ref CloudWatchLogsLogGroup
            LogStreamName: !Ref CloudWatchLogsLogStream
          CompressionFormat: "UNCOMPRESSED"
          DataFormatConversionConfiguration:
            Enabled: false
          EncryptionConfiguration:
            NoEncryptionConfig: "NoEncryption"
          Prefix: ""
          RoleARN: !GetAtt KinesisIAMRole1.Arn
          ProcessingConfiguration:
            Enabled: false
          S3BackupMode: "Disabled"

    # ------------------------------------------------------------#
    # CloudWatch Logs
    # ------------------------------------------------------------#
    CloudWatchLogsLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Sub "/aws/kinesisfirehose/aws-fsx-${ProjectName}-${Environment}-auditlog-fs"
        RetentionInDays: 90
    CloudWatchLogsLogStream:
      Type: AWS::Logs::LogStream
      Properties:
        LogGroupName: !Ref CloudWatchLogsLogGroup
        LogStreamName: "S3Delivery"
    # TODO: SecrutiyGorup

    # ------------------------------------------------------------------------------------ #
    # S3
    # ------------------------------------------------------------------------------------ #
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${ProjectName}-${Environment}-${S3BucketName}-${AWS::AccountId}
        OwnershipControls:
          Rules:
            - ObjectOwnership: "BucketOwnerEnforced"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: True
          BlockPublicPolicy: True
          IgnorePublicAcls: True
          RestrictPublicBuckets: True
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: "AES256"
              BucketKeyEnabled: false
        LifecycleConfiguration:
          Rules:
            - Id: AbortIncompleMultipartUpload # 未完了なマルチパートアップロードの削除
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 7
              Status: "Enabled"
